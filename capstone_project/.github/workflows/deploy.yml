# .github/workflows/deploy.yml

name: Deploy to Staging and Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write # To write release notes
  pull-requests: write # To create pull requests
  id-token: write # To authenticate to GCP

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.push.outputs.image_uri }}
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: ${{ vars.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY_REPO }}/manufacturing-copilot:${{ github.sha }}
          labels: |
            "sha=${{ github.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image URI output
        id: push
        run: |
          echo "image_uri=${{ vars.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/${{ vars.GCP_ARTIFACT_REGISTRY_REPO }}/manufacturing-copilot:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_STAGING_SA }}

      - name: Deploy to Cloud Run (Staging)
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: manufacturing-copilot-staging
          project_id: ${{ vars.GCP_PROJECT_ID }}
          region: ${{ vars.GCP_REGION }}
          image: ${{ needs.build-and-push-image.outputs.image_uri }}
          env_vars: |
            ENVIRONMENT=staging
            LOG_LEVEL=DEBUG

      - name: Run smoke tests on staging
        run: |
          # In a real scenario, you would have a dedicated smoke test suite
          echo "Running smoke tests against ${{ steps.deploy.outputs.url }}"
          curl -f ${{ steps.deploy.outputs.url }}/health

  gate-to-production:
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    environment:
      name: production
    steps:
      - name: Manual Approval Gate
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ vars.PRODUCTION_APPROVERS }}
          minimum-approvals: 1
          issue-link: ${{ vars.JIRA_CHANGE_TICKET_URL }}

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: gate-to-production
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Authenticate to Google Cloud (Production)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_PROD_SA }}

      - name: Deploy to Cloud Run (Production)
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: manufacturing-copilot-prod
          project_id: ${{ vars.GCP_PROJECT_ID }}
          region: ${{ vars.GCP_REGION }}
          image: ${{ needs.build-and-push-image.outputs.image_uri }}
          env_vars: |
            ENVIRONMENT=production
            LOG_LEVEL=INFO

      - name: Archive Release Evidence
        run: |
          # This step would call a more robust script to gather artifacts
          echo "Archiving evidence for SHA ${{ github.sha }} approved by ${{ github.actor }}"
          
      - name: Run smoke tests on production
        run: |
          echo "Running smoke tests against ${{ steps.deploy.outputs.url }}"
          curl -f ${{ steps.deploy.outputs.url }}/health
