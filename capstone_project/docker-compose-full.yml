version: '3.8'

# Complete Data Engineering + ML + GenAI Stack
# Services: Kafka, Spark, Airflow, PostgreSQL, FastAPI, Metabase, Prometheus, Grafana

services:
  # ============================================================================
  # STREAMING DATA LAYER - Apache Kafka
  # ============================================================================
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # ============================================================================
  # BATCH PROCESSING - Apache Spark
  # ============================================================================
  
  spark-master:
    image: bitnami/spark:3.5
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8082:8080"  # Spark Master Web UI
      - "7077:7077"  # Spark Master Port
    volumes:
      - ./data_engineering/batch_pipeline:/opt/spark-jobs

  spark-worker:
    image: bitnami/spark:3.5
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no

  # ============================================================================
  # DATABASE LAYER - PostgreSQL
  # ============================================================================
  
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-copilot}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-copilot_pwd}
      POSTGRES_DB: ${POSTGRES_DB:-manufacturing_db}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-copilot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # ORCHESTRATION - Apache Airflow
  # ============================================================================
  
  airflow-init:
    image: apache/airflow:2.7.3
    container_name: airflow-init
    depends_on:
      - postgres
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-copilot}:${POSTGRES_PASSWORD:-copilot_pwd}@postgres:5432/${POSTGRES_DB:-manufacturing_db}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-admin}
    volumes:
      - ./data_engineering/airflow_dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin

  airflow-webserver:
    image: apache/airflow:2.7.3
    container_name: airflow-webserver
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-copilot}:${POSTGRES_PASSWORD:-copilot_pwd}@postgres:5432/${POSTGRES_DB:-manufacturing_db}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    ports:
      - "8083:8080"  # Airflow Web UI
    volumes:
      - ./data_engineering/airflow_dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ./data_engineering/batch_pipeline:/opt/airflow/spark_jobs
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    image: apache/airflow:2.7.3
    container_name: airflow-scheduler
    depends_on:
      - postgres
      - airflow-init
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER:-copilot}:${POSTGRES_PASSWORD:-copilot_pwd}@postgres:5432/${POSTGRES_DB:-manufacturing_db}
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./data_engineering/airflow_dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ./data_engineering/batch_pipeline:/opt/airflow/spark_jobs
    command: scheduler

  # ============================================================================
  # ANALYTICS & BI - Metabase
  # ============================================================================
  
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    depends_on:
      - postgres
    ports:
      - "3010:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${POSTGRES_DB:-manufacturing_db}
      MB_DB_PORT: 5432
      MB_DB_USER: ${POSTGRES_USER:-copilot}
      MB_DB_PASS: ${POSTGRES_PASSWORD:-copilot_pwd}
      MB_DB_HOST: postgres
    volumes:
      - metabase-data:/metabase-data

  # ============================================================================
  # GENAI APPLICATION - FastAPI Backend
  # ============================================================================
  
  fastapi-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: manufacturing-copilot
    depends_on:
      - postgres
      - kafka
    ports:
      - "8080:8080"
    environment:
      - HUGGINGFACE_TOKEN=${HUGGINGFACE_TOKEN}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-copilot}:${POSTGRES_PASSWORD:-copilot_pwd}@postgres:5432/${POSTGRES_DB:-manufacturing_db}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - LOG_LEVEL=INFO
    volumes:
      - ./app:/app/app
      - ./ml_models:/app/ml_models
      - ./data_lake:/app/data_lake
    command: uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload

  # ============================================================================
  # MONITORING - Prometheus & Grafana
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards

  # ============================================================================
  # REDIS - Caching Layer
  # ============================================================================
  
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-data:
  airflow-logs:
  metabase-data:
  prometheus-data:
  grafana-data:
  redis-data:

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  default:
    name: manufacturing-network
    driver: bridge
